# live-boot 3.0 Todo

## Priority 1: Core Features

### General

  * Synchronise and unify boot parameters
  * Document stuff properly, both the actual implementation and its customization
  * Use sane coding style consistently

### Boot Methods

  * Optical media (cd, dvd, bd)
  * Mass storage (usb-hdd, usb-zip)

### Boot Process

  * One time argument handling (with proper respect of boot.conf, also from /live/boot.conf)
  * One time function handling
  * Distributor specific mode for overloading of functions
  * Release specific compatibility/legacy handling during package build-time
  * i18n/l10n support during early userspace (gettext, po4a)
  * Logging with different types of messages (info, warn, error, ...). Depending on the log-level just the according level messages are visible. All boot messages should be logged for later investigation.
  * Improve media detection by writing a proper patch for [#700920](http://bugs.debian.org/700920).

## Priority 2: Important Features

### Boot Methods

  * Network filesystems (nfs, smb/cifs)
  * Local filesystems (ext2-4 etc.), as image and plain
  * Implement dmsquash like dracut.

### Boot Process

  * Splash support (plymouth)
  * (Better) breakpoint support.

## Priority 3: Wishlist

### General

  * Optimize sh calls for speed and simplicity
  * Investigate about implementing parts of it that are performance critical in C
  * Fix (almost) whatever is listed in the BTS :)

### Boot Methods

  * Support nested images
  * Network filesystems (afs)
  * Network protocols (http, ftp, rsync)
  * Network devices (nbd, aoe, fcoe, iscsi)
  * Local storage subsystems (lvm, md, etc.).
  * Allow to include system completely in initrd.img (like debirf).
  * Allow tunneling (ssh, openvpn, ike) when network is needed to access the root filesystem.

### Boot Process

  * Allow to make more or less sure, that with a certain initrd we're booting a certain rootfs (live-uuid etc.)
  * Maybe even integrate mechanism to produce 'targeted' and 'generic' initrd-images, where the targeted only contain the scripts defined.
  * Use initramfs keyb functions, rather than re-implenting wheels
  * Allow to clear persistency (by reformating the partition) through live-boot (for the firmware trick: factory reset).
  * cryptsetup and rsyncrypto (or something similar) for the persistency layer
  * persistency layer on network shares, global and per user.
  * Improved toram (awk progressbar or something like that)
  * Redo login manager support (kdm, gdm, nodm, qingy, plain startx on tty1)
  * Make sure it works with suspend-to-disk.
  * investigate about using squashfs instead of cpio for snapshots (use puppy linux for inspiration)
  * optionally, prompt the user for missing firmware just like d-i does with check-missing-firmware.sh in hw-detect
